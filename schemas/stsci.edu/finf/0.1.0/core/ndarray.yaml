%YAML 1.1
---
$schema: "http://www.stsci.edu/schemas/yaml-schema/draft-01"
id: "http://www.stsci.edu/schemas/finf/0.1.0/core/ndarray"
title: >
  An *n*-dimensional array or table.
description: |
  There are two ways to store the data in an ndarray.

  - Inline in the tree: This is recommended only for small arrays.  In
    this case, the entire ``ndarray`` tag may be a nested list, in
    which case the type of the array is inferred from the content.
    (TODO: At present these rules are just "what Numpy does", but we
    need to document that).  The inline data may also be given in the
    ``data`` property, in which case it is possible to explicitly
    specify the ``dtype`` and other properties.

  - External to the tree: The data comes from a :ref:`block` within
    the same FINF file or an external FINF file referenced by a URI.
examples:
  -
    - An inline array, with implicit data type
    - |
        !ndarray
          [[1, 0, 0],
           [0, 1, 0],
           [0, 0, 1]]

  -
    - An inline array, with an explicit data type
    - |
        !ndarray
          dtype: float64
          data:
            [[1, 0, 0],
             [0, 1, 0],
             [0, 0, 1]]

  -
    - A double-precision array, in contiguous memory in a block within
      the same file
    - |
        !ndarray
          source: 0
          shape: [1024, 1024]
          dtype: float64

  -
    - A view of a tile in that image
    - |
        !ndarray
          source: 0
          shape: [256, 256]
          dtype: float64
          strides: [8192, 8]
          offset: 2099200

  -
    - A table dtype, with nested columns for a coordinate in (ra,
      dec), and a 3x3 convolution kernel
    - |
        !ndarray
          source: 0
          shape: [64]
          dtype:
            - name: coordinate
              dtype:
                - name: ra
                  dtype: float64
                - name: dec
                  dtype: float64
            - name: kernel
              dtype: float32
              shape: [3, 3]

  -
    - An array in Fortran order
    - |
        !ndarray
          source: 0
          shape: [1024, 1024]
          dtype: float64
          strides: [8192, 8]

  -
    - An array where values of -999 are treated as missing
    - |
        !ndarray
          source: 0
          shape: [256, 256]
          dtype: float64
          mask: -999

  -
    - An array where another array is used as a mask
    - |
        !ndarray
          source: 0
          shape: [256, 256]
          dtype: float64
          mask: !ndarray
            source: 1
            shape: [256, 256]
            dtype: uint8

  -
    - An array where the data is stored in the first block in
      another FINF file.
    - |
        !ndarray
          source: external.finf
          shape: [256, 256]
          dtype: float64

tag: "tag:stsci.edu:finf/0.1.0/core/ndarray"
type: object

definitions:
  scalar_dtype:
    type: string
    enum: [int8, uint8, int16, uint16, int32, uint32, int64, uint64, float32,
           float64, float128, complex64, complex128, complex256]

  inline-data:
    description: |
      Inline data is stored in YAML format directly in the tree, rather than
      referencing a binary block.  It is made out of nested lists.

    type: array
    items:
      anyOf:
        - type: number
        - type: string
        - $ref: complex
        - $ref: "#/definitions/inline-data"

anyOf:
  - $ref: "#/definitions/inline-data"
  - type: object
    properties:
      source:
        description: |
          The source of the data.

          - If an integer:
              - If positive, the zero-based index of the block within the
                same file.

              - If negative, the index from the last block within the same
                file.  For example, a source of ``-1`` corresponds to the
                last block in the same file.

          - If a string, a URI to an external FINF file containing the
            block data.  Relative URIs and ``file:`` and ``http:``
            protocols must be supported.  Other protocols may be supported
            by specific library implementations.

            The ability to reference block data in an external FINF file
            is intentionally limited to the first block in the external
            FINF file, and is intended only to support the needs of
            :ref:`exploded`.  For the more general case of referencing
            data in an external FINF file, use tree :ref:`references`.

        anyOf:
          - type: integer
          - type: string
            format: uri

      data:
        description: |
          The data for the array inline.

          If ``dtype`` and/or ``shape`` are also provided, they must
          match the data here and can be used as a consistency check.
          ``strides``, ``offset`` and ``byteorder`` are meaningless
          when ``data`` is provided.
        $ref: "#/definitions/inline-data"

      shape:
        description: |
          The shape of the array.

          The first entry may be the string ``*``, indicating that the
          length of the first index of the array will be automatically
          determined from the size of the block.  This is used for
          streaming support.
        type: array
        items:
          anyOf:
            - type: integer
              minimum: 0
            - enum: ['*']

      dtype:
        description: |
          The data format of the array elements.
        anyOf:
          - $ref: "#/definitions/scalar_dtype"
          - type: array
            items:
              anyOf:
                - $ref: "#/definitions/scalar_dtype"
                - type: object
                  properties:
                    name:
                      type: string
                      pattern: "[A-Za-z_][A-Za-z0-9_]*"
                      description: The name of the field
                    dtype:
                      $ref: "#/properties/dtype"
                    byteorder:
                      type: string
                      enum: [big, little]
                      default: big
                    shape:
                      type: array
                      items:
                        type: integer
                        minimum: 0
                  required: [dtype]

      byteorder:
        description: >
          The byte order (big- or little-endian) of the array data.
        type: string
        enum: [big, little]
        default: big

      offset:
        description: >
          The offset, in bytes, within the data for this start of this
          view.
        type: integer
        minimum: 0
        default: 0

      strides:
        description: >
          The number of bytes to skip in each dimension.  If not provided,
          the array is assumed by be contiguous and in C order.  If
          provided, must be the same length as the shape property.
        type: array
        items:
          anyOf:
            - type: integer
              minimum: 1
            - type: integer
              maximum: -1

      mask:
        description: >
          Describes how missing values in the array are stored.  If a
          scalar number, that number is used to represent missing values.
          If an ndarray, the given array provides a mask, where non-zero
          values represent missing values in this array.  The mask array
          must be broadcastable to the dimensions of this array.
        anyOf:
          - type: number
          - $ref: complex
          - $ref: ndarray

    dependencies:
      source: [shape, dtype]
    additionalProperties: false
