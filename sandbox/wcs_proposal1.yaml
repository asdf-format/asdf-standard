# This example is chosen to demonstrate how the separability of the
# transformations changes through the pipeline.  There are three input
# coordinates: (x, y, lambda), none of which are separable.  The
# wavelength depends on where on the detector is is sampled.  The
# first step of the transform is thus to separate the spatial and
# wavelength dimensions, after which they are dealt with separately.

#                 x     y    lambda
#                 |     |       |
#              +--------------------+
#              |                    |
#              +--------------------+
#               x |  y  |  lambda |
#              +----------+    +----+
#              |          |    |    |
#              +----------+    +----+
#              ra | dec |  lambda |

# This adds a concept of named steps in the top-level transformation
# between different named coordinate spaces.

wcs: !wcs/wcs

  # WCS may provide a forward or backward transformation, or both.  If
  # either is missing, and it can be computed unabiguously, that will
  # be used, otherwise the explicitly specified one is used.

  # In an earlier iteration of the proposal, these were `pix_to_world`
  # and `world_to_pix`, but now this uses the more generic terms
  # "forward" and "backward".

  # "forward" and "backward" are always lists of wcs steps, each of
  # which describes an input frame/coordinate space and the
  # transformation to the next frame.

  forward: !wcs/steps
    - !wcs/step
      # This is the name of the frame of the inputs of the step.  It's
      # not from a controlled vocabulary: It's just an identifier so
      # that a system could say "transform from detector to focal_plane
      # space".
      name: detector

      # Frames is a dictionary.  The keys are frame names, which
      # often come from, but are not limited to, a standard
      # vocabulary (see below).  The values are lists of dimension names.
      # Each key/value is independent and separable.  In the case
      # of this example, in the first step, none of the dimensions
      # are separable, so we have a single entry
      frames:
        detector:
          axes: [x, y, lambda]
          units: [pixel, pixel, nm]
          # Below is the transform (possibly nested) that transforms from
          # this frame to the one below.  The format will allow the
          # transformation to be included inline right here, but in
          # practice, it likely improves readability to include the
          # transforms with all of their parameters in the definitions
          # section below.  In fact, a useful way to organize them might
          # be to include the transforms that define the overall structure
          # of the pipeline that doesn't change for a given instrument
          # configuration, and the transforms that change between
          # exposures separately.
          transform: *separate

    - !wcs/step
      # At this step, the wavelength is now independent of the spatial
      # dimensions.  So we proceed with separate transformations
      # for the two separable parts from here on out.
      name: intermediate
      frames:
        detector:
          axes: [x, y]
          units: [pixel, pixel]
          transform: !wcs/serial
            - *linear
            - *projection
            - *sky_rotation
        spectral:
          axes: [lambda]
          transform: *spectral

    - !wcs/step
      name: world
      frames:
        celestial:
          axes: [ra, dec]
          units: [radian, radian]
        spectral:
          axes: [lambda]
          units: [Hz]

  # Definitions is a catch-all for transforms that are defined here
  # but used in other places.  The word "definitions" here is a common
  # JSON schema convention.
  definitions:

    # The &xxx syntax here is YAML notation for defining an anchor that
    # is referencable elsewhere as *xxx.

    # This is a lookup table distortion from pixels to focal plane.
    - &separate
       # I'm not entirely clear on what this transformation does, but
       # lets say for sake of argument that it takes the three input
       # dimensions (x, y, lambda) and produces a wavelength that is
       # no longer dependent on the spatial dimensions.  I guess
       # the spatial dimensions were never dependent on wavelength
       # to begin with, so they pass through unaltered...???

    # This is the linear transformation from focal plane to
    # pre-spherical (is that the correct name) coordinates.  It is a
    # serial composite transformation made out of three
    # transformations for translation, rotation and scale.
    - &linear !wcs/serial
      - !wcs/translate
        translation: [1024, 1024]  # Equivalent to CRPIX
      - !wcs/rotate2d
        angle: 5                   # Equivalent to PC matrix (though doesn't
                                   # handle skew etc.)
      - !wcs/scale
        scale: [5, 5]              # Equivalent to CDELT

    # This is the spectral transformation from wavelength to frequency
    - &spectral !wcs/scale
      scale: [3e17]

    # This is the projection from intermediate coordinates to world coordinates
    - &projection !wcs/tangent

    # This is the sky rotation that happens post-projection
    - &sky-rotation !wcs/rotate2d
      angle: 2.5

#
# Standard frame names:
#
# - time
# - celestial
# - spectral
# - cartesian
# - detector
# - image
